// <auto-generated />
using System;
using FinalProject.Areas.PayrollAdmin.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinalProject.Migrations
{
    [DbContext(typeof(PayrollDbContext))]
    partial class PayrollDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.Property<int?>("RecruitmentId");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("Bonus");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("OpenCompany");

                    b.Property<int>("PoctIndexId");

                    b.Property<DateTime>("SalaryDate");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PoctIndexId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.CompanyDepartament", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("DepartmantId");

                    b.HasKey("CompanyId", "DepartmantId");

                    b.HasIndex("DepartmantId");

                    b.ToTable("CompanyDepartaments");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.CompanyProfit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Profit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyProfit");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Continuity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("PermissionType");

                    b.Property<string>("Reason");

                    b.Property<int>("RecruitmentId");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("Continuity");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Departmant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Departmants");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("CurrentAddres")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("DistrictRegistration")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("EducationType");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Fathername")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("GenderType");

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MarialStatusType");

                    b.Property<DateTime>("PassportExpirationDate");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("StatusType");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.FormerWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("WhenLeft");

                    b.Property<DateTime>("WhenStarted");

                    b.Property<string>("WhyLeftReason")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("WorkName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FormerWorks");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("RecruitmentId");

                    b.Property<decimal>("TotalSalary");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Reason");

                    b.Property<int?>("RecruitmentId");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.PoctIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PoctIndex");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmantId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DepartmantId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Recruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("PositionId");

                    b.Property<int?>("ShopId");

                    b.Property<DateTime>("WhenLeft");

                    b.Property<DateTime>("WhenStarted");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ShopId");

                    b.ToTable("Recruitments");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.RecruitmentShopBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("RecruitmentId");

                    b.Property<decimal>("ShopBonusAmount");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("RecruitmentShopBonus");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<int>("PositionId");

                    b.Property<decimal>("SalaryAmount");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PositionId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<bool>("IsHead");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.ShopBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount");

                    b.Property<decimal>("MinAmount");

                    b.Property<decimal>("PromotionAmount");

                    b.Property<int>("ShopId");

                    b.Property<DateTime>("WhenLeft")
                        .HasColumnType("date");

                    b.Property<DateTime>("WhenStarted")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopBonus");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.ShopProfit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Profit");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopProfits");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RecruitmentId");

                    b.Property<DateTime>("WhenLeft")
                        .HasColumnType("date");

                    b.Property<DateTime>("WhenStarted")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.AppUser", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Employee", "Employee")
                        .WithOne("AppUser")
                        .HasForeignKey("FinalProject.Areas.PayrollAdmin.Models.AppUser", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.AppUserRole", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Bonus", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Recruitment", "Recruitment")
                        .WithMany("Bonus")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Company", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.PoctIndex", "PoctIndex")
                        .WithMany()
                        .HasForeignKey("PoctIndexId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.CompanyDepartament", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Company", "Company")
                        .WithMany("CompanyDepartaments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Departmant", "Departmant")
                        .WithMany("CompanyDepartaments")
                        .HasForeignKey("DepartmantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.CompanyProfit", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Company", "Company")
                        .WithMany("CompanyProfits")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Continuity", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Recruitment", "Recruitment")
                        .WithMany("Continuities")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.FormerWork", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Employee", "Employee")
                        .WithMany("FormerWork")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Payroll", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Recruitment", "Recruitment")
                        .WithMany("Payrolls")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Penalty", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Recruitment", "Recruitment")
                        .WithMany("Penalties")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Position", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Departmant", "Departmant")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Recruitment", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Employee", "Employee")
                        .WithMany("Recruitments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Position", "Position")
                        .WithMany("Recruitments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Shop", "Shop")
                        .WithMany("Recruitments")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.RecruitmentShopBonus", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Recruitment", "Recruitment")
                        .WithMany()
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Salary", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Company", "Company")
                        .WithMany("Salaries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Position", "Position")
                        .WithMany("Salaries")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Shop", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Company", "Company")
                        .WithMany("Shops")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.ShopBonus", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Shop", "Shop")
                        .WithMany("ShopBonus")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.ShopProfit", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Shop", "Shop")
                        .WithMany("ShopProfits")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Areas.PayrollAdmin.Models.Vacation", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.Recruitment", "Recruitment")
                        .WithMany("Vacations")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.PayrollAdmin.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
